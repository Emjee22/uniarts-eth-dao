// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BidAccepted extends ethereum.Event {
  get params(): BidAccepted__Params {
    return new BidAccepted__Params(this);
  }
}

export class BidAccepted__Params {
  _event: BidAccepted;

  constructor(event: BidAccepted) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class BidCancelled extends ethereum.Event {
  get params(): BidCancelled__Params {
    return new BidCancelled__Params(this);
  }
}

export class BidCancelled__Params {
  _event: BidCancelled;

  constructor(event: BidCancelled) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class BidCreated extends ethereum.Event {
  get params(): BidCreated__Params {
    return new BidCreated__Params(this);
  }
}

export class BidCreated__Params {
  _event: BidCreated;

  constructor(event: BidCreated) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assetId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get assetAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get payTokenAddress(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get priceInWei(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get expiresAt(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class ChangedFeePerMillion extends ethereum.Event {
  get params(): ChangedFeePerMillion__Params {
    return new ChangedFeePerMillion__Params(this);
  }
}

export class ChangedFeePerMillion__Params {
  _event: ChangedFeePerMillion;

  constructor(event: ChangedFeePerMillion) {
    this._event = event;
  }

  get cutPerMillion(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OrderCancelled extends ethereum.Event {
  get params(): OrderCancelled__Params {
    return new OrderCancelled__Params(this);
  }
}

export class OrderCancelled__Params {
  _event: OrderCancelled;

  constructor(event: OrderCancelled) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class OrderCreated extends ethereum.Event {
  get params(): OrderCreated__Params {
    return new OrderCreated__Params(this);
  }
}

export class OrderCreated__Params {
  _event: OrderCreated;

  constructor(event: OrderCreated) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get payTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get assetId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get assetAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get priceInWei(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get expiresAt(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class OrderSuccessful extends ethereum.Event {
  get params(): OrderSuccessful__Params {
    return new OrderSuccessful__Params(this);
  }
}

export class OrderSuccessful__Params {
  _event: OrderSuccessful;

  constructor(event: OrderSuccessful) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get payTokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get priceInWei(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OrderUpdated extends ethereum.Event {
  get params(): OrderUpdated__Params {
    return new OrderUpdated__Params(this);
  }
}

export class OrderUpdated__Params {
  _event: OrderUpdated;

  constructor(event: OrderUpdated) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get payTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get priceInWei(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get expiresAt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetNewPayToken extends ethereum.Event {
  get params(): SetNewPayToken__Params {
    return new SetNewPayToken__Params(this);
  }
}

export class SetNewPayToken__Params {
  _event: SetNewPayToken;

  constructor(event: SetNewPayToken) {
    this._event = event;
  }

  get tokenName(): string {
    return this._event.parameters[0].value.toString();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MultiTokenTrustMarketplace__bidByOrderIdResult {
  value0: Bytes;
  value1: Address;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Bytes, value1: Address, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class MultiTokenTrustMarketplace__orderByOrderIdResult {
  value0: Bytes;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: Address;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Bytes,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: Address,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class MultiTokenTrustMarketplace extends ethereum.SmartContract {
  static bind(address: Address): MultiTokenTrustMarketplace {
    return new MultiTokenTrustMarketplace(
      "MultiTokenTrustMarketplace",
      address
    );
  }

  _INTERFACE_ID_ERC1155(): Bytes {
    let result = super.call(
      "_INTERFACE_ID_ERC1155",
      "_INTERFACE_ID_ERC1155():(bytes4)",
      []
    );

    return result[0].toBytes();
  }

  try__INTERFACE_ID_ERC1155(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "_INTERFACE_ID_ERC1155",
      "_INTERFACE_ID_ERC1155():(bytes4)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  bidByOrderId(
    param0: Address,
    param1: Bytes
  ): MultiTokenTrustMarketplace__bidByOrderIdResult {
    let result = super.call(
      "bidByOrderId",
      "bidByOrderId(address,bytes32):(bytes32,address,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return new MultiTokenTrustMarketplace__bidByOrderIdResult(
      result[0].toBytes(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_bidByOrderId(
    param0: Address,
    param1: Bytes
  ): ethereum.CallResult<MultiTokenTrustMarketplace__bidByOrderIdResult> {
    let result = super.tryCall(
      "bidByOrderId",
      "bidByOrderId(address,bytes32):(bytes32,address,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MultiTokenTrustMarketplace__bidByOrderIdResult(
        value[0].toBytes(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  cutPerMillion(): BigInt {
    let result = super.call("cutPerMillion", "cutPerMillion():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cutPerMillion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cutPerMillion",
      "cutPerMillion():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxCutPerMillion(): BigInt {
    let result = super.call(
      "maxCutPerMillion",
      "maxCutPerMillion():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxCutPerMillion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxCutPerMillion",
      "maxCutPerMillion():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  orderByOrderId(
    param0: Address,
    param1: Bytes
  ): MultiTokenTrustMarketplace__orderByOrderIdResult {
    let result = super.call(
      "orderByOrderId",
      "orderByOrderId(address,bytes32):(bytes32,address,address,uint256,uint256,address,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return new MultiTokenTrustMarketplace__orderByOrderIdResult(
      result[0].toBytes(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_orderByOrderId(
    param0: Address,
    param1: Bytes
  ): ethereum.CallResult<MultiTokenTrustMarketplace__orderByOrderIdResult> {
    let result = super.tryCall(
      "orderByOrderId",
      "orderByOrderId(address,bytes32):(bytes32,address,address,uint256,uint256,address,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MultiTokenTrustMarketplace__orderByOrderIdResult(
        value[0].toBytes(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  payTokens(param0: string): Address {
    let result = super.call("payTokens", "payTokens(string):(address)", [
      ethereum.Value.fromString(param0)
    ]);

    return result[0].toAddress();
  }

  try_payTokens(param0: string): ethereum.CallResult<Address> {
    let result = super.tryCall("payTokens", "payTokens(string):(address)", [
      ethereum.Value.fromString(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getOrderSize(): BigInt {
    let result = super.call("getOrderSize", "getOrderSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getOrderSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getOrderSize", "getOrderSize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOrderId(_orderIndex: BigInt): Bytes {
    let result = super.call("getOrderId", "getOrderId(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(_orderIndex)
    ]);

    return result[0].toBytes();
  }

  try_getOrderId(_orderIndex: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getOrderId", "getOrderId(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(_orderIndex)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _payTokenName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _payTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetOwnerCutPerMillionCall extends ethereum.Call {
  get inputs(): SetOwnerCutPerMillionCall__Inputs {
    return new SetOwnerCutPerMillionCall__Inputs(this);
  }

  get outputs(): SetOwnerCutPerMillionCall__Outputs {
    return new SetOwnerCutPerMillionCall__Outputs(this);
  }
}

export class SetOwnerCutPerMillionCall__Inputs {
  _call: SetOwnerCutPerMillionCall;

  constructor(call: SetOwnerCutPerMillionCall) {
    this._call = call;
  }

  get _cutPerMillion(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetOwnerCutPerMillionCall__Outputs {
  _call: SetOwnerCutPerMillionCall;

  constructor(call: SetOwnerCutPerMillionCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class SetPayTokenCall extends ethereum.Call {
  get inputs(): SetPayTokenCall__Inputs {
    return new SetPayTokenCall__Inputs(this);
  }

  get outputs(): SetPayTokenCall__Outputs {
    return new SetPayTokenCall__Outputs(this);
  }
}

export class SetPayTokenCall__Inputs {
  _call: SetPayTokenCall;

  constructor(call: SetPayTokenCall) {
    this._call = call;
  }

  get _token_name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _token_address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetPayTokenCall__Outputs {
  _call: SetPayTokenCall;

  constructor(call: SetPayTokenCall) {
    this._call = call;
  }
}

export class SetPausedCall extends ethereum.Call {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }

  get _setPaused(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class CreateOrderCall extends ethereum.Call {
  get inputs(): CreateOrderCall__Inputs {
    return new CreateOrderCall__Inputs(this);
  }

  get outputs(): CreateOrderCall__Outputs {
    return new CreateOrderCall__Outputs(this);
  }
}

export class CreateOrderCall__Inputs {
  _call: CreateOrderCall;

  constructor(call: CreateOrderCall) {
    this._call = call;
  }

  get _payTokenName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _assetId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _assetAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _priceInWei(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _expiresAt(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CreateOrderCall__Outputs {
  _call: CreateOrderCall;

  constructor(call: CreateOrderCall) {
    this._call = call;
  }
}

export class CancelOrderCall extends ethereum.Call {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _orderId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }
}

export class UpdateOrderCall extends ethereum.Call {
  get inputs(): UpdateOrderCall__Inputs {
    return new UpdateOrderCall__Inputs(this);
  }

  get outputs(): UpdateOrderCall__Outputs {
    return new UpdateOrderCall__Outputs(this);
  }
}

export class UpdateOrderCall__Inputs {
  _call: UpdateOrderCall;

  constructor(call: UpdateOrderCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _orderId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _payTokenName(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _priceInWei(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _expiresAt(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdateOrderCall__Outputs {
  _call: UpdateOrderCall;

  constructor(call: UpdateOrderCall) {
    this._call = call;
  }
}

export class SafeExecuteOrderCall extends ethereum.Call {
  get inputs(): SafeExecuteOrderCall__Inputs {
    return new SafeExecuteOrderCall__Inputs(this);
  }

  get outputs(): SafeExecuteOrderCall__Outputs {
    return new SafeExecuteOrderCall__Outputs(this);
  }
}

export class SafeExecuteOrderCall__Inputs {
  _call: SafeExecuteOrderCall;

  constructor(call: SafeExecuteOrderCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _orderId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _priceInWei(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeExecuteOrderCall__Outputs {
  _call: SafeExecuteOrderCall;

  constructor(call: SafeExecuteOrderCall) {
    this._call = call;
  }
}

export class CreateBidCall extends ethereum.Call {
  get inputs(): CreateBidCall__Inputs {
    return new CreateBidCall__Inputs(this);
  }

  get outputs(): CreateBidCall__Outputs {
    return new CreateBidCall__Outputs(this);
  }
}

export class CreateBidCall__Inputs {
  _call: CreateBidCall;

  constructor(call: CreateBidCall) {
    this._call = call;
  }

  get _orderId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _assetId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _assetAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _priceInWei(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _expiresAt(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CreateBidCall__Outputs {
  _call: CreateBidCall;

  constructor(call: CreateBidCall) {
    this._call = call;
  }
}

export class SafePlaceBidCall extends ethereum.Call {
  get inputs(): SafePlaceBidCall__Inputs {
    return new SafePlaceBidCall__Inputs(this);
  }

  get outputs(): SafePlaceBidCall__Outputs {
    return new SafePlaceBidCall__Outputs(this);
  }
}

export class SafePlaceBidCall__Inputs {
  _call: SafePlaceBidCall;

  constructor(call: SafePlaceBidCall) {
    this._call = call;
  }

  get _orderId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _assetId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _assetAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _priceInWei(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _expiresAt(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SafePlaceBidCall__Outputs {
  _call: SafePlaceBidCall;

  constructor(call: SafePlaceBidCall) {
    this._call = call;
  }
}

export class CancelBidCall extends ethereum.Call {
  get inputs(): CancelBidCall__Inputs {
    return new CancelBidCall__Inputs(this);
  }

  get outputs(): CancelBidCall__Outputs {
    return new CancelBidCall__Outputs(this);
  }
}

export class CancelBidCall__Inputs {
  _call: CancelBidCall;

  constructor(call: CancelBidCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _orderId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CancelBidCall__Outputs {
  _call: CancelBidCall;

  constructor(call: CancelBidCall) {
    this._call = call;
  }
}

export class AcceptBidCall extends ethereum.Call {
  get inputs(): AcceptBidCall__Inputs {
    return new AcceptBidCall__Inputs(this);
  }

  get outputs(): AcceptBidCall__Outputs {
    return new AcceptBidCall__Outputs(this);
  }
}

export class AcceptBidCall__Inputs {
  _call: AcceptBidCall;

  constructor(call: AcceptBidCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _orderId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _priceInWei(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AcceptBidCall__Outputs {
  _call: AcceptBidCall;

  constructor(call: AcceptBidCall) {
    this._call = call;
  }
}
